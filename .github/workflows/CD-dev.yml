name: CD

on:
  push: #해당 브랜치에 push(merge) 했을 때
    branches:
      - qa

permissions: write-all #테스트 결과 작성을 위해 쓰기권한 추가

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #jdk 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'

      #gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
#      - name : Clean gradle
#        run : ./gradlew clean
      

      #배포를 위한 secret yml 설정
      - name: Make application-secret.yml
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources
          touch ./application-secret.yml
          echo "${{ secrets.PROPERTIES_SECRET }}" > ./application-secret.yml
        shell: bash

      #로그 xml 파일 설정
      - name: Make logback-spring.xml
        run: |
          cd ./src/main/resources
          touch ./logback-spring.xml
          echo "${{ secrets.LOGBACK_SPRING }}" > ./logback-spring.xml
        shell: bash



      #test를 포함한 프로젝트 빌드
      - name: Build With Gradle
        run: ./gradlew bootJar

      # Docker 빌드 & 푸쉬
      - name: docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY}} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY}}

      # Deploy (DEV-Server)
      - name: Deploy (DEV)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker stop server
            docker rm server
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY}}:latest
            sudo docker-compose up -d
            docker rmi -f $(docker images -f "dangling=true" -q)